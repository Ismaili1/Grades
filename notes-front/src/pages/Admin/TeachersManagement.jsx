import React, { useEffect, useState, useRef } from 'react';
import axios from 'axios';
import { FiEdit, FiTrash2, FiUserPlus, FiX, FiSave } from 'react-icons/fi';
import '../../css/Admin/teachersmanagement.css';

const API_URL = 'http://localhost:8000/api';
const ROLE_ENSEIGNANT = 'enseignant';

// Form component for adding/editing teachers
const TeacherForm = ({ formData, onSubmit, onCancel, mode, loading }) => (
  <div className="teacher-form-container">
    <h3>{mode === 'add' ? 'Ajouter un enseignant' : 'Modifier l\'enseignant'}</h3>
    <form onSubmit={onSubmit} className="teacher-form">
      <div className="form-group">
        <label>Nom complet</label>
        <input
          type="text"
          name="name"
          value={formData.name}
          onChange={(e) => {
            const value = e.target.value;
            // Generate email based on name
            const email = value 
              ? value.toLowerCase().replace(/\s+/g, '.') + '@school.ma'
              : '';
            
            // Update both name and email
            onSubmit({
              target: { 
                name: 'email',
                value: email
              }
            }, true);
            
            // Update the name
            e.persist();
            onSubmit(e);
          }}
          required
          placeholder="Nom complet"
        />
      </div>
      
      <div className="form-group">
        <label>Email</label>
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={onSubmit}
          required
          placeholder="Email"
        />
      </div>
      
      <div className="form-group">
        <label>Spécialité</label>
        <input
          type="text"
          name="specialty"
          value={formData.specialty || ''}
          onChange={onSubmit}
          placeholder="Spécialité"
        />
      </div>
      
      {mode === 'add' && (
        <div className="form-group">
          <label>Mot de passe</label>
          <input
            type="password"
            name="password"
            value={formData.password}
            onChange={onSubmit}
            required={mode === 'add'}
            placeholder="Mot de passe"
          />
        </div>
      )}
      
      <div className="form-actions">
        <button 
          type="button" 
          className="btn-cancel"
          onClick={onCancel}
          disabled={loading}
        >
          <FiX /> Annuler
        </button>
        <button 
          type="submit" 
          className="btn-save"
          disabled={loading}
        >
          {loading ? 'Enregistrement...' : <><FiSave /> Enregistrer</>}
        </button>
      </div>
    </form>
  </div>
);

function TeachersManagement() {
  const [teachers, setTeachers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [showForm, setShowForm] = useState(false);
  const [formMode, setFormMode] = useState('add');
  const [currentTeacherId, setCurrentTeacherId] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    specialty: '',
    password: 'password123' // Default password
  });
  const formRef = useRef(null);

  const toggleForm = () => {
    setShowForm(!showForm);
    if (!showForm) {
      // Reset form when showing
      setFormMode('add');
      setCurrentTeacherId(null);
      setFormData({
        name: '',
        email: '',
        specialty: '',
        password: 'password123'
      });
    }
  };

  // Fetch teachers on component mount
  useEffect(() => {
    const fetchTeachers = async () => {
      const token = localStorage.getItem('token');
      if (!token) {
        setError('Vous devez être connecté.');
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        const response = await axios.get(`${API_URL}/users`, {
          headers: { Authorization: `Bearer ${token}` },
          params: { role: ROLE_ENSEIGNANT }
        });
        
        let teachersData = [];
        if (Array.isArray(response.data)) {
          teachersData = response.data;
        } else if (response.data?.users) {
          teachersData = response.data.users;
        } else if (response.data?.data) {
          teachersData = response.data.data;
        }

        setTeachers(teachersData);
      } catch (error) {
        setError(`Erreur lors du chargement: ${error.response?.data?.message || error.message}`);
      } finally {
        setLoading(false);
      }
    };

    fetchTeachers();
  }, []);

  const handleFormSubmit = async (e, isEmailAutoGenerated = false) => {
    e?.preventDefault();
    
    if (!isEmailAutoGenerated) {
      const form = e?.target;
      if (form) {
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        
        // Only update password if it's not empty (for edit mode)
        if (!data.password) {
          delete data.password;
        }
        
        setFormData(prev => ({
          ...prev,
          ...data
        }));
        
        if (formMode === 'add') {
          await handleAddTeacher(data);
        } else {
          await handleUpdateTeacher(data);
        }
      }
    } else {
      // Handle email auto-generation
      setFormData(prev => ({
        ...prev,
        email: e.target.value
      }));
    }
  };
  
  const handleAddTeacher = async (data) => {
    try {
      setIsSubmitting(true);
      const token = localStorage.getItem('token');
      
      // First create the user
      const userData = {
        name: data.name,
        email: data.email,
        password: data.password,
        role: ROLE_ENSEIGNANT
      };
      
      const response = await axios.post(`${API_URL}/register`, userData, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      // Then update teacher-specific data if needed
      if (data.specialty) {
        await axios.put(
          `${API_URL}/users/${response.data.user.id}/teacher`,
          { specialty: data.specialty },
          { headers: { Authorization: `Bearer ${token}` } }
        );
      }
      
      // Refresh teachers list
      const teachersResponse = await axios.get(`${API_URL}/users`, {
        headers: { Authorization: `Bearer ${token}` },
        params: { role: ROLE_ENSEIGNANT }
      });
      
      setTeachers(teachersResponse.data.data || teachersResponse.data);
      setShowForm(false);
      showSuccess('Enseignant ajouté avec succès');
    } catch (error) {
      setError(`Erreur lors de l'ajout: ${error.response?.data?.message || error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const handleUpdateTeacher = async (data) => {
    try {
      setIsSubmitting(true);
      const token = localStorage.getItem('token');
      
      // Update user data
      await axios.put(
        `${API_URL}/users/${currentTeacherId}`,
        {
          name: data.name,
          email: data.email,
          ...(data.password && { password: data.password })
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      // Update teacher-specific data
      await axios.put(
        `${API_URL}/users/${currentTeacherId}/teacher`,
        { specialty: data.specialty },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      // Refresh teachers list
      const response = await axios.get(`${API_URL}/users`, {
        headers: { Authorization: `Bearer ${token}` },
        params: { role: ROLE_ENSEIGNANT }
      });
      
      setTeachers(response.data.data || response.data);
      setShowForm(false);
      showSuccess('Enseignant mis à jour avec succès');
    } catch (error) {
      setError(`Erreur lors de la mise à jour: ${error.response?.data?.message || error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const handleEdit = (teacher) => {
    // First, scroll to top of the page
    window.scrollTo({ top: 0, behavior: 'smooth' });
    
    // Then update the form data and show the form
    setFormMode('edit');
    setCurrentTeacherId(teacher.id);
    setFormData({
      name: teacher.name,
      email: teacher.email,
      specialty: teacher.teacher?.specialty || '',
      password: '' // Don't show password in edit mode
    });
    
    // Show the form
    setShowForm(true);
  };

  const handleDelete = async (teacherId, teacherName) => {
    if (!window.confirm(`Êtes-vous sûr de vouloir supprimer l'enseignant ${teacherName} ?`)) {
      return;
    }

    try {
      const token = localStorage.getItem('token');
      await axios.delete(`${API_URL}/users/${teacherId}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      setTeachers(prev => prev.filter(t => t.id !== teacherId));
      showSuccess('Enseignant supprimé avec succès');
    } catch (error) {
      setError(`Erreur lors de la suppression: ${error.response?.data?.message || error.message}`);
    }
  };
  
  const showSuccess = (message) => {
    const successDiv = document.createElement('div');
    successDiv.className = 'success-message';
    successDiv.textContent = message;
    document.body.appendChild(successDiv);
    
    setTimeout(() => {
      successDiv.classList.add('show');
    }, 10);
    
    setTimeout(() => {
      successDiv.classList.remove('show');
      setTimeout(() => {
        document.body.removeChild(successDiv);
      }, 300);
    }, 3000);
  };
  
  const getSubjectName = (teacher) => 
    teacher.teacher?.subjects?.[0]?.name || 'Aucune matière assignée';
    
  const hasSubject = (teacher) => 
    !!teacher.teacher?.subjects?.length;

  if (loading) return <div className="loading">Chargement...</div>;
  
  return (
    <div className="teachers-management">
      <div className="page-header">
        <h1 className="page-title">Gestion des Enseignants</h1>
        {!showForm && (
          <button 
            className="btn btn-add" 
            onClick={toggleForm}
          >
            <FiUserPlus /> Ajouter un enseignant
          </button>
        )}
      </div>

      {showForm && (
        <div ref={formRef}>
          <TeacherForm
            formData={formData}
            onSubmit={handleFormSubmit}
            onCancel={toggleForm}
            mode={formMode}
            loading={isSubmitting}
          />
        </div>
      )}

      {error && <div className="error-message">{error}</div>}
      
      <div className="table-container">
        <table className="teachers-table">
          <thead>
            <tr>
              <th>Nom</th>
              <th>ID</th>
              <th>Email</th>
              <th>Spécialité</th>
              <th>Statut</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {teachers.length === 0 ? (
              <tr>
                <td colSpan="6" className="empty-state">
                  Aucun enseignant disponible
                </td>
              </tr>
            ) : (
              teachers.map(teacher => (
                <tr key={teacher.id}>
                  <td>{teacher.name || 'N/A'}</td>
                  <td>{teacher.id || 'N/A'}</td>
                  <td>{teacher.email || 'N/A'}</td>
                  <td>{teacher.teacher?.specialty || 'Non spécifiée'}</td>
                  <td>
                    <span className={`status ${hasSubject(teacher) ? 'assigned' : 'unassigned'}`}>
                      {hasSubject(teacher) ? 'Assigné' : 'Non assigné'}
                    </span>
                  </td>
                  <td className="actions">
                    <button 
                      className="btn-edit"
                      onClick={() => handleEdit(teacher)}
                    >
                      <FiEdit />
                    </button>
                    <button 
                      className="btn-delete"
                      onClick={() => handleDelete(teacher.id, teacher.name)}
                    >
                      <FiTrash2 />
                    </button>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
  );
}

export default TeachersManagement;